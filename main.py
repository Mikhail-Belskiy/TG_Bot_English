import random
import sqlalchemy
from sqlalchemy import insert
from telebot import types, TeleBot, custom_filters
from telebot.storage import StateMemoryStorage
from telebot.handler_backends import State, StatesGroup
from sqlalchemy.orm import sessionmaker
from data.models import Users, User_translation, Words, Translations
from dotenv import load_dotenv
import os


DSN = "postgresql://postgres:Mb20041995@localhost:5432/Tg_Bot_translation"
engine = sqlalchemy.create_engine(DSN)
Session = sessionmaker(bind=engine)
session = Session()

print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')

load_dotenv()
state_storage = StateMemoryStorage()
token_bot = os.getenv('TOKEN')
bot = TeleBot(token_bot, state_storage=state_storage) #–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤ –ø–∞–º—è—Ç–∏

@bot.message_handler(commands= ['start'])
def echo_all(message):  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
    user_id = message.from_user.id
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")
    try:
        user = session.query(Users).filter_by(telegram_id=str(user_id)).first()
        if not user:
            stmt = insert(Users).values(telegram_id=str(user_id))
            session.execute(stmt)
            session.commit()
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
        else:
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: {user_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    except Exception as e:
        session.rollback()
        print(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
    finally:
        session.close()
    bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /Go —á—Ç–æ–± –Ω–∞—á–∞—Ç—å")

buttons = []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
def get_random_word_and_translations():
    word_entry = session.query(Words).order_by(sqlalchemy.func.random()).first()
    translations = session.query(Translations).filter_by(word_id=word_entry.id).all()

    # –†–∞–∑–¥–µ–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ
    correct_translation = [t.translation for t in translations if t.is_primary][0]
    incorrect_translations = [t.translation for t in translations if not t.is_primary]

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ –∏–∑ –≤–µ—Ä–Ω–æ–≥–æ –∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–ª—É—á–∞–π–Ω—ã—Ö –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö
    chosen_incorrect = random.sample(incorrect_translations, 3)
    return word_entry.word, correct_translation, chosen_incorrect

class Command:
    ADD_WORD = '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï'
    DELETE_WORD = '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æüîô'
    NEXT = '–î–∞–ª—å—à–µ ‚è≠'

class MyStates(StatesGroup):
    target_word = State()
    translate_word = State()
    another_words = State()

class AddWordStates(StatesGroup):
    entering_word = State()
    entering_translations = State()

class DeleteWordStates(StatesGroup):
    delete_word = State()

def show_hint(*lines):
    return '\n'.join(lines)

def show_target(data):
    return f"{data['target_word']} -> {data['translate_word']}"

@bot.message_handler(commands=['Go'])
def create_cards(message):
    cid = message.chat.id
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    user = session.query(Users).filter_by(telegram_id=str(user_id)).first()
    if user:
        bot.send_message(cid, "–ü—Ä–∏–≤–µ—Ç. –î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π")
    else:
        bot.send_message(cid, "–û—à–∏–±–∫–∞: –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return

    global buttons
    target_word, correct_translation, incorrect_translations = get_random_word_and_translations()
    all_options = [correct_translation] + incorrect_translations
    random.shuffle(all_options)
    markup = types.ReplyKeyboardMarkup(row_width=2)
    buttons = [types.KeyboardButton(option) for option in all_options]

    next_btn = types.KeyboardButton(Command.NEXT)
    add_word_btn = types.KeyboardButton(Command.ADD_WORD)
    delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
    buttons.extend([next_btn, add_word_btn, delete_word_btn])

    markup.add(*buttons)

    greeting = f"–í—ã–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞:\nüá∑üá∫ {target_word}"
    bot.send_message(message.chat.id, greeting, reply_markup=markup)
    bot.set_state(message.from_user.id, MyStates.target_word, message.chat.id)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['target_word'] = correct_translation
        data['translate_word'] = target_word
        data['other_words'] = incorrect_translations
def get_user_step(uid):
    user = session.query(Users).filter_by(telegram_id=str(uid)).first()
    if user:
        return user.user_step
    else:
        return 0  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0

@bot.message_handler(func=lambda message: message.text == Command.NEXT)
def next_cards(message):
    create_cards(message)

@bot.message_handler(func=lambda message: message.text == Command.DELETE_WORD)
def start_delete_word(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    bot.set_state(message.from_user.id, DeleteWordStates.delete_word, message.chat.id)

@bot.message_handler(state=DeleteWordStates.delete_word)
def delete_word_translation(message):
    word_to_delete = message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–µ —Å–ª–æ–≤–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    word_entry = session.query(Words).filter_by(word=word_to_delete).first()

    if not word_entry:
        bot.send_message(message.chat.id, f"–°–ª–æ–≤–æ '{word_to_delete}' –Ω–µ—Ç –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ.")
    else:
        # –£–¥–∞–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–∏–º —Å–ª–æ–≤–æ–º
        session.query(Translations).filter_by(word_id=word_entry.id).delete()
        # –£–¥–∞–ª—è–µ–º —Å–∞–º–æ —Å–ª–æ–≤–æ
        session.delete(word_entry)
        session.commit()
        bot.send_message(message.chat.id, f"–°–ª–æ–≤–æ '{word_to_delete}' –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.")
    bot.delete_state(message.from_user.id, message.chat.id)

@bot.message_handler(func=lambda message: message.text == Command.ADD_WORD)
def add_word(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Ä—É—Å—Å–∫–æ–µ —Å–ª–æ–≤–æ:")
    bot.set_state(message.from_user.id, AddWordStates.entering_word, message.chat.id)
    print(message.text)  # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î

@bot.message_handler(state=AddWordStates.entering_word)
def entering_word(message):
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['new_word'] = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —á–µ—Ç—ã—Ä–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ (–ø–µ—Ä–≤—ã–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º), —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—è—Ç—ã–º–∏. –ü—Ä–∏–º–µ—Ä: 'hello,great,car,house'")
    bot.set_state(message.from_user.id, AddWordStates.entering_translations, message.chat.id)

@bot.message_handler(state=AddWordStates.entering_translations)
def entering_translations(message):
    translations = message.text.split(',')
    if len(translations) != 4:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–æ–≤–Ω–æ —á–µ—Ç—ã—Ä–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–∞.")
        return

    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        new_word = data['new_word']
        primary_translation = translations[0]  # –ü–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º

        # –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –∏ –ø–µ—Ä–µ–≤–æ–¥—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        new_word_entry = Words(word=new_word)
        session.add(new_word_entry)
        session.commit()

        translation_entries = [
            Translations(word_id=new_word_entry.id, translation=translations[i], is_primary=(i == 0))
            for i in range(len(translations))
        ]
        session.add_all(translation_entries)
        session.commit()

        bot.send_message(message.chat.id, f"–°–ª–æ–≤–æ '{new_word}' –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")

    bot.delete_state(message.from_user.id, message.chat.id)

@bot.message_handler(func=lambda message: True, content_types=['text'])
def message_reply(message):
    text = message.text
    markup = types.ReplyKeyboardMarkup(row_width=2)

    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        target_word = data['target_word']

        if text == target_word:
            hint = show_target(data)
            hint_text = ["–û—Ç–ª–∏—á–Ω–æ!‚ù§", hint]
            next_btn = types.KeyboardButton(Command.NEXT)
            buttons.extend([next_btn])
            hint = show_hint(*hint_text)
        else:
            for btn in buttons:
                if btn.text == text:
                    btn.text = text + '‚ùå'
                    break
            hint = show_hint("–î–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞!",
                             f"–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –≤—Å–ø–æ–º–Ω–∏—Ç—å —Å–ª–æ–≤–æ üá∑üá∫{data['translate_word']}")

    markup.add(*buttons)
    bot.send_message(message.chat.id, hint, reply_markup=markup)
    # –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    user = session.query(Users).filter_by(telegram_id=str(message.from_user.id)).first()
    if user:
        user.user_step += 1
        session.commit()
bot.add_custom_filter(custom_filters.StateFilter(bot))
bot.infinity_polling(skip_pending=True)